<div if="{ isImport() }">
    <div class="form-group">
        <label><?php echo $this->translate('Location') ?>&nbsp;/&nbsp;<?php echo $this->translate('Filename') ?></label>
    </div>
</div>
<div if="{ isExport() }">
    <div class="form-group">
        <label><?php echo $this->translate('Location') ?>&nbsp;/&nbsp;<?php echo $this->translate('Filename Template') ?></label>
    </div>
</div>
<div class="row">
    <div class="col-xs-7 col-md-3">
        <div class="form-group">
            <select name="location" class="form-control form-control-inline-4">
                <option value="">- <?php echo $this->translate('Location') ?> -</option>
                <option each="{ loc in availableLocations }">{ loc }</option>
            </select>
        </div>
    </div>
    <div class="col-xs-5 col-md-1 text-center form-control-separator">
        <strong>/</strong>
    </div>

        <div class="col-xs-12 col-md-8">
            <div class="form-group">
                <div if="{ isImport() }">
                    <input name="filename_pattern" type="text" class="form-control form-control-inline-10" placeholder="<?php echo $this->translate('Filename') ?>" onchange="{ tick }">
                </div>
                <div if="{ isExport() }">
                    <input name="filename_template" type="text" class="form-control form-control-inline-10" placeholder="<?php echo $this->translate('Filename Template') ?>" onchange="{ tick }">
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="well well-sm text-info">
            <div if="{ isImport() }">
                <?php echo $this->translate('Note: The filename will be translated to a regular expression. You can provide your own pattern by enclosing it with "/". Regex is useful when you need to match dynamic parts of the filename like dates, prefixes, suffixes, etc. If you are not familiar with Regex you can try it out online f.e. on ') ?><a href="http://www.regexr.com/" target="_blank">http://www.regexr.com/</a>
            </div>
            <div if="{ isExport() }">
                <?php echo sprintf($this->translate('Note: The filename template can contain placeholders like %s or %s to dynamically create unique files which won\'t conflict with older files. If you want to learn more about it have a look at the docs: '), '\\\{\\\{data.id\\\}\\\}', '\\\{\\\{#now\\\}\\\}Y-m-d\\\{\\\{/now\\\}\\\}') ?><a href="#" target="_blank">@TODO: Add link to docs/</a>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    function (context) {
        var self = this,
            handlerData = context.handlerData,
            handlerDeferred = context.handlerDeferred,
            $modal = context["$modal"];

        $modal.on("hide.bs.modal", function () {
            //Push back old metadata if deferred is not resolved yet
            if (! handlerDeferred.promise.isFulfilled()) {
                handlerDeferred.resolve(handlerData.task_metadata);
            }
        });

        $modal.find(".btn-save").click(function () {
            handlerDeferred.resolve(self.collectMetadata());
            $modal.modal('hide');
        });

        this.availableLocations = context.app.locations;
        this.tick = function () {};

        this.syncWithProcessManager = function () {
            self.connector = context.app.getConnector(handlerData.processing_id);
            self.processingType = context.app.getProcessingType(handlerData.task_processing_type);
            self.taskType = handlerData.task_type;
            self.applyMetadata(handlerData.task_metadata);
            self.update();
        }

        this.isImport = function () {
             if (self.taskType == '<?php echo \Prooph\Processing\Processor\Definition::TASK_COLLECT_DATA  ?>') {
                 if (! self.location.value || self.location.value == "outbox") {
                     self.location.value = 'inbox';
                 }
                 return true;
             };

            return false;
        }

        this.isExport = function () {
            if  (self.taskType == '<?php echo \Prooph\Processing\Processor\Definition::TASK_PROCESS_DATA  ?>') {
                if (! self.location.value || self.location.value == "inbox") {
                    self.location.value = 'outbox';
                }
                return true;
            }

            return false;
        }

        this.applyMetadata = function (metadata) {
            if (! metadata) return;

            if (metadata.location) {
                self.location.value = metadata.location;
            }

            if (metadata.filename_pattern) {
                self.filename_pattern.value = metadata.filename_pattern;
            }

            if (metadata.filename_template) {
                self.filename_template.value = metadata.filename_template;
            }
        }

        this.collectMetadata = function () {
            var tmpMetadata = {};
            if (self.connector.metadata && self.connector.metadata.file_type) {
                tmpMetadata.file_type = self.connector.metadata.file_type;
            }

            if (self.isImport()) {
                tmpMetadata.filename_pattern = self.filename_pattern.value;
            }

            if (self.isExport()) {
                tmpMetadata.filename_template = self.filename_template.value;
            }

            tmpMetadata.location = self.location.value;

            return tmpMetadata;
        }

        this.on("mount", function () {
            self.syncWithProcessManager();
        });
    }
</script>